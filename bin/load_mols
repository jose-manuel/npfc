#!/usr/bin/env python

# standard
import sys
import warnings
from pathlib import Path
from datetime import datetime
import logging
import argparse
from itertools import product
# data
import psycopg2
import pandas as pd
# chemoinformatics
import rdkit
from rdkit import RDLogger
# custom libraries
import npfc
from npfc import load
from npfc import save

description = """
Script load_mols
==========================
This script is used for loading molecules from SDF, CSV or HDF files and then
export them to CSV or HDF files with RDKit Mol objects.

It uses the installed npfc libary in your favorite env manager.

Examples:

    >>> # Create HDF chunks of 10k records with syntax chembl_000.hdf, chembl_001.hdf, etc. in folder dir.
    >>> chunk_db.py -d chembl24 -u gally -p psql -f format -m 'mol' -o dir/chembl.hdf -n 10000
"""

def main():
    d0 = datetime.now()

    description = """read_mols. Script used for """

    # parameters CLI
    parser = argparse.ArgumentParser(description=description, formatter_class=argparse.ArgumentDefaultsHelpFormatter)
    parser.add_argument('input_mols', type=str, default=None, help="<chembl> for triggering predefined scenario for chembl data extraction.")
    parser.add_argument('output_mols', type=str, default=None, help="")
    parser.add_argument('-n', '--nrecords', type=utils._argparse_positive_int, default=10000, help="Maximum number of records within a chunk. No chunking by default.")
    parser.add_argument('-s', '--shuffle', type=bool, default=True, help="Shuffle records.")
    parser.add_argument('-k', '--keep_props', type=bool, default=False, help="Keep all properties found in the source, in addition to molid and mol columns.")
    parser.add_argument('-e', '--encode_mols', type=bool, default=True, help="Encode molecules into base64 format.")
    parser.add_argument('--src_id', type=str, default='_Name', help="")
    parser.add_argument('--src_mol', type=str, default='mol', help="")
    parser.add_argument('--col_mol', type=str, default='mol', help="")
    parser.add_argument('--col_id', type=str, default='idm', help="")
    parser.add_argument('--log', type=str, default='INFO', help="Specify level of logging. Possible values are: CRITICAL, ERROR, WARNING, INFO, DEBUG.")
    args = parser.parse_args()


# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ FUNCTIONS ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ #

if __name__ == '__main__':
    main()
