#!/usr/bin/env python

"""
Script network_frags
==========================
This script is used for generating the Natural Fragment Network (NFN) edges file by combining nx Graph objects.
The output file can then be imported to Cytoscape.
"""

# standard
import warnings
import sys
from datetime import datetime
import logging
import pandas as pd
import argparse
from pathlib import Path
import base64
import pickle
# chemoinformatics
import rdkit
# dev
import npfc
from npfc import load
from npfc import save
from npfc import utils
from npfc import fragment
# disable SettingWithCopyWarning warnings
pd.options.mode.chained_assignment = None  # default='warn'

# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ FUNCTIONS ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ #


def main():

    # init
    d0 = datetime.now()
    description = """Script used for mapping fragment combinations.

    It uses the installed npfc libary in your favorite env manager.

    Example:

        >>> network_frags input_dir_maps output_file_nfn

    For parsing input files in input_dir, it takes example on first file read in folder for parsing options (file type and compression).

    """

    # parameters CLI
    parser = argparse.ArgumentParser(description=description, formatter_class=argparse.ArgumentDefaultsHelpFormatter)
    parser.add_argument('input_dir', type=str, default=None, help="Input dir for fragment maps.")
    parser.add_argument('output_nfn', type=str, default=None, help="Output file ")
    parser.add_argument('--log', type=str, default='INFO', help="Specify level of logging. Possible values are: CRITICAL, ERROR, WARNING, INFO, DEBUG.")
    args = parser.parse_args()

    # logging
    logger = utils._configure_logger(args.log)
    logger.info("RUNNING FRAGMENT NETWORKING")
    warnings.filterwarnings('ignore', category=pd.io.pytables.PerformanceWarning)  # if None is returned instead of a molecule, do not complain about mixed types
    pad = 40

    # parse arguments
    utils.check_arg_input_dir(args.input_dir)
    utils.check_arg_output_file(args.output_nfn)
    chunks_map = [str(x) for x in list(Path(args.input_dir).glob("*"))]
    chunks_map.sort()   # in place
    map_format, map_compression = utils.get_file_format(chunks_map[0])  # take example on first file read

    # display infos
    logger.info("LIBRARY VERSIONS:")
    logger.info("rdkit".ljust(pad) + f"{rdkit.__version__}")
    logger.info("pandas".ljust(pad) + f"{pd.__version__}")
    logger.info("npfc".ljust(pad) + f"{npfc.__version__}")
    logger.info("ARGUMENTS:")
    logging.info("INPUT_FCC".ljust(pad) + f"{args.input_fcc}")
    logging.info("MAP_FORMAT".ljust(pad) + f"{map_format}")
    logging.info("MAP_COMPRESSION".ljust(pad) + f"{map_compression}")
    logging.info("OUTPUT_NFN".ljust(pad) + f"{args.output_nfn}")
    logging.info("LOG".ljust(pad) + f"{args.log}")

    # parse map files
    # df_map = pd.concat([pd.read_csv(x, sep="|", compression="gzip") for x in chunks])


# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ MAIN ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ #


if __name__ == '__main__':
    main()
    sys.exit(0)
