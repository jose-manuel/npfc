#!/usr/bin/env python

"""
Script annotate_pnp
==========================
This script is used for annotating Pseudo Natural Products (PNP).
"""

# standard
import warnings
import sys
from datetime import datetime
import logging
import pandas as pd
import argparse
import base64
import pickle
from pathlib import Path
# chemoinformatics
import rdkit
# dev
import npfc
from npfc import save
from npfc import utils
# disable SettingWithCopyWarning warnings
pd.options.mode.chained_assignment = None  # default='warn'


# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ FUNCTIONS ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ #


def label_pnp_maps(df, df_ref):
    """Iterate over df and df_ref graphs to see if molecules in df are pseudo-natural-products
    in regards to df_ref, which contains only natural products.

    As the input dataframes contain 1 fragment map per row, a same molecule might be
    labelled both as PNP and non-PNP (respect. True and False).

    The refining of these results by groupbing entries by idm is performed outside
    of this function.

    """
    results = []
    df_ref["edges_ref"] = df_ref["graph"].map(lambda x: x.edges(data=True))

    for i in range(len(df.index)):
        edges = df.iat[i, 16].edges(data='abbrev')
        pnp = True
        for j in range(len(df_ref.index)):
            # if all edges of tested mol are present in ref edges, then it is not PNP
            if all(edge_ref in edges for edge_ref in df_ref.iat[j, 18]):
                results.append(False)
                break

        if pnp:
            results.append(True)

    return results


def _label_pnp_mols(group):
    """Applied on the group of fragment map dataframe after annotation by pnp_fm.
    If any map of a molecule has a label set to True, then the molecule should be considered
    as PNP, even if some maps are not True.
    """
    if any(group["pnp_fm"]):
        group["pnp_mol"] = True
    else:
        group["pnp_mol"] = False

    return group


def main():

    # init
    d0 = datetime.now()
    description = """Script is used for annotating Pseudo Natural Products (PNP).

    It takes two inputs:
        - the map file with the molecules to annotate by comparing fragment maps (graphs)
        - a folder that contains molecular files of natural products

    It creates one output:
        - the input molecular file annotated with a new column "pnp" valuing either True or False.

    It uses the installed npfc libary in your favorite env manager.

    Example:

        >>> annotate_pnp file_map.csv.gz file_map.csv.gz

    """

    # parameters CLI
    parser = argparse.ArgumentParser(description=description, formatter_class=argparse.ArgumentDefaultsHelpFormatter)
    parser.add_argument('input_map', type=str, default=None, help="Fragment Map file to annotate")
    parser.add_argument('ref_dir', type=str, default=None, help="Directory with Fragment Map files to use as references (currently wiht syntax: <name>_map.csv.gz)")
    parser.add_argument('output_map', type=str, default=None, help="Output file basename. It gets appended with the type of output being produced: raw, clean and map.")
    parser.add_argument('--log', type=str, default='INFO', help="Specify level of logging. Possible values are: CRITICAL, ERROR, WARNING, INFO, DEBUG.")
    args = parser.parse_args()

    # logging
    logger = utils._configure_logger(args.log)
    logger.info("RUNNING PNP ANNOTATION")
    warnings.filterwarnings('ignore', category=pd.io.pytables.PerformanceWarning)  # if None is returned instead of a molecule, do not complain about mixed types
    pad = 40

    # parse arguments
    utils.check_arg_input_file(args.input_map)
    utils.check_arg_output_file(args.output_map)
    input_format, input_compression = utils.get_file_format(args.input_map)
    out_format, out_compression = utils.get_file_format(args.output_map)

    # get the list of reference files
    p = Path(args.ref_dir)
    if not p.is_dir():
        raise ValueError(f"ERROR! REF_DIR COULD NOT BE FOUND! ({args.ref_dir})")
    ref_files = [str(x) for x in list(p.glob("*_map.csv.gz"))]
    ref_files.sort()
    logging.info(f"FOUND {len(ref_files)} FRAGMENT MAP FILES AT {args.ref_dir}")

    # display infos
    logger.info("LIBRARY VERSIONS:")
    logger.info("rdkit".ljust(pad) + f"{rdkit.__version__}")
    logger.info("pandas".ljust(pad) + f"{pd.__version__}")
    logger.info("npfc".ljust(pad) + f"{npfc.__version__}")
    logger.info("ARGUMENTS:")
    logging.info("INPUT_FCC".ljust(pad) + f"{args.input_map}")
    logging.info("INPUT_FORMAT".ljust(pad) + f"{input_format}")
    logging.info("INPUT_COMPRESSION".ljust(pad) + f"{input_compression}")
    logging.info("REF_DIR".ljust(pad) + f"{args.ref_dir}")
    logging.info("NUM REF_DIR".ljust(pad) + f"{len(ref_files)}")
    logging.info("OUTPUT_MAP".ljust(pad) + f"{args.output_map}")
    logging.info("OUT_FORMAT".ljust(pad) + f"{out_format}")
    logging.info("OUT_COMPRESSION".ljust(pad) + f"{out_compression}")
    logging.info("LOG".ljust(pad) + f"{args.log}")

    # begin
    logging.info("BEGIN")

    # load map
    logging.info("LOADING FRAGMENT MAPS")
    d1 = datetime.now()
    df_map = pd.read_csv(args.input_map, sep="|", compression="gzip")
    df_map.drop("Unnamed: 0", axis=1, inplace=True)
    logging.info(f"FOUND {len(df_map.index)} FRAGMENT MAPS")
    logging.info("DESERIALIZING GRAPHS")
    df_map['graph'] = df_map['graph'].map(lambda x: pickle.loads(base64.b64decode(x)))

    # load map_refs
    logging.info("LOADING ALL REFERENCE FRAGMENT MAPS")
    d2 = datetime.now()
    df_map_ref = pd.concat([pd.read_csv(x, sep="|", compression="gzip") for x in ref_files])
    df_map_ref.drop("Unnamed: 0", axis=1, inplace=True)
    logging.info(f"FOUND {len(df_map_ref.index)} REFERENCE FRAGMENT MAPS")
    logging.info("DESERIALIZING GRAPHS")
    df_map_ref['graph'] = df_map_ref['graph'].map(lambda x: pickle.loads(base64.b64decode(x)))

    # mapping fragment combinations
    logger.info(f"ANNOTATING REMAINING FRAGMENT MAPS")
    d3 = datetime.now()
    df_map["pnp_fm"] = label_pnp_maps(df_map, df_map_ref)

    logger.info(f"DISPLAYING RESULTS")
    d4 = datetime.now()
    # pnps
    df_pnps = df_map[df_map["pnp_fm"]].groupby("idm").first().reset_index()[["idm"]]
    logger.info("=" * pad)
    logger.info(f"LIST OF PNPs ({len(df_pnps.index)})".center(pad))
    logger.info("=" * pad)
    [logging.info("PNP: " + df_pnps.iat[i, 0]) for i in range(len(df_pnps.index))]
    # others
    df_others = df_map[~df_map["idm"].isin(df_pnps['idm'])].groupby("idm").first().reset_index()[["idm"]]
    logger.info("=" * pad)
    logger.info(f"LIST OF NON-PNPs ({len(df_others.index)})".center(pad))
    logger.info("=" * pad)
    [logging.info("NON-PNP: " + df_others.iat[i, 0]) for i in range(len(df_others.index))]
    logger.info("=" * pad)

    # curating results
    logger.info("CURATING RESULTS")
    df_map['pnp_mol'] = df_map.groupby('idm').apply(_label_pnp_mols)['pnp_mol']  # cringy but works.... ok for now...

    # saving results
    logger.info("SAVING RESULTS")
    d5 = datetime.now()
    logger.info("SAVING PNP AND NON PNP LISTS")

    logger.info(f"ENCODING GRAPHS")
    df_map['graph'] = df_map['graph'].map(lambda x: base64.b64encode(pickle.dumps(x)).decode("utf-8"))
    logger.info(f"SAVING MAP RESULTS AT '{args.output_map}'")
    save.file(df_map, args.output_map, encode_mols=False)

    # end
    d6 = datetime.now()
    logging.info("SUMMARY")
    logger.info("COMPUTATIONAL TIME: CONFIGURING JOB".ljust(pad * 2) + f"{d1-d0}")
    logger.info("COMPUTATIONAL TIME: LOADING INPUT FRAGMENT MAPS".ljust(pad * 2) + f"{d2-d1}")
    logger.info("COMPUTATIONAL TIME: LOADING REFERENCE FRAGMENT MAPS".ljust(pad * 2) + f"{d3-d2}")
    logger.info("COMPUTATIONAL TIME: ANNOTATING FRAGMENT MAPS".ljust(pad * 2) + f"{d4-d3}")
    logger.info("COMPUTATIONAL TIME: SAVING ANNOTATED FRAGMENT MAPS".ljust(pad * 2) + f"{d5-d4}")
    logger.info("COMPUTATIONAL TIME: DISPLAYING RESULTS".ljust(pad * 2) + f"{d6-d5}")
    logger.info("COMPUTATIONAL TIME: TOTAL".ljust(pad * 2) + f"{d6-d0}")
    logging.info("END")


# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ MAIN ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ #


if __name__ == '__main__':
    main()
    sys.exit(0)
