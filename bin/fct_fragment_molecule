#!/usr/bin/env python

"""
Script fct_fragment_molecule
=============================
This script generates the molecule_molecule relationships file for a given input chunk.
"""
import argparse
from datetime import datetime
import sys
import json
# data
import pandas as pd
# chemoinformatics
import rdkit
# dev
import npfc
from npfc import load
from npfc import save
from npfc import utils


# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ FUNCTIONS ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ #


# def get_one_row_one_fhit(row):
#     d = {'fragment_id': [], 'atom_indices': []}
#     for k, v in row.atom_indices.items():
#         for l in v:
#             d['fragment_id'].append(k)
#             d['atom_indices'].append(l)
#
#     df = pd.DataFrame(d)
#     df['molecule_id'] = row.molecule_id
#     return df


def main():

    # init
    d0 = datetime.now()
    description = """Script for generating the molecule - fragment relationships (fragment hits).
    Currently only one type of relationship is supported:
        - frag -[SUBSTRUCT_OF]-> mol

    Properties are included within the relationship:
        - atom_indices

    Example:

        >>> fct_fragment_molecule dataset/12_pnp/data/file.csv.gz fct/fragment_molecule.csv.gz

    """

    # parameters CLI
    parser = argparse.ArgumentParser(description=description, formatter_class=argparse.ArgumentDefaultsHelpFormatter)
    parser.add_argument('input_latest_step', type=str, default=None, help="Input from the latest step (fcg for natural products and pnp for synthetic compounds).")
    parser.add_argument('output_table', type=str, default=None, help="Output file with the fragment - molecule relationships.")
    parser.add_argument('--log', type=str, default='INFO', help="Specify level of logging. Possible values are: CRITICAL, ERROR, WARNING, INFO, DEBUG.")
    args = parser.parse_args()

    # logging
    logger = utils._configure_logger(args.log)
    logger.info("RUNNING FCT_FRAGMENT_MOLECULE")
    pad = 40

    # parse arguments
    utils.check_arg_input_file(args.input_latest_step)
    utils.check_arg_output_file(args.output_table)

    # display infos

    # versions
    logger.info("LIBRARY VERSIONS:")
    logger.info("rdkit".ljust(pad) + f"{rdkit.__version__}")
    logger.info("pandas".ljust(pad) + f"{pd.__version__}")
    logger.info("npfc".ljust(pad) + f"{npfc.__version__}")
    # arguments
    logger.info("ARGUMENTS:")
    logger.info("INPUT_LATEST_STEP".ljust(pad) + f"{args.input_latest_step}")
    logger.info("OUTPUT_FRAGMENT_MOLECULE_TABLE".ljust(pad) + f"{args.output_table}")
    # log
    logger.info("LOG".ljust(pad) + f"{args.log}")

    # begin

    logger.info("BEGIN")
    d1 = datetime.now()

    # load inputs
    logger.info("LOADING INPUT FILES")
    df = load.file(args.input_latest_step)[['idm', '_d_aidxs']].rename({'idm': 'molecule_id', '_d_aidxs': 'atom_indices'}, axis=1)
    d2 = datetime.now()

    # process data
    dfs = []
    for row in df.itertuples():
        d = {'fragment_id': [], 'atom_indices': []}
        for k, v in row.atom_indices.items():
            for l in v:
                d['fragment_id'].append(k)
                d['atom_indices'].append(l)

        df_curr = pd.DataFrame(d)
        df_curr['molecule_id'] = row.molecule_id
        dfs.append(df_curr)
    df = pd.concat(dfs)
    df['relationship'] = 'SUBSTRUCT_OF'
    df = df[['fragment_id', 'relationship', 'molecule_id', 'atom_indices']].sort_values(['fragment_id', 'molecule_id'])
    df['atom_indices'] = df['atom_indices'].map(json.dumps)
    d3 = datetime.now()

    # save file
    logger.info("SAVING OUTPUT")
    save.file(df, args.output_table)
    d4 = datetime.now()

    # end

    logger.info("SUMMARY")
    logger.info("COMPUTATIONAL TIME: CONFIGURING JOB".ljust(pad * 2) + f"{d1-d0}")
    logger.info("COMPUTATIONAL TIME: LOADING INPUTS".ljust(pad * 2) + f"{d2-d1}")
    logger.info("COMPUTATIONAL TIME: PROCESSING DATA".ljust(pad * 2) + f"{d3-d2}")
    logger.info("COMPUTATIONAL TIME: SAVING OUTPUT".ljust(pad * 2) + f"{d4-d3}")
    logger.info("COMPUTATIONAL TIME: TOTAL".ljust(pad * 2) + f"{d4-d0}")
    logger.info("END")
    sys.exit(0)

# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ MAIN ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ #


if __name__ == '__main__':
    main()
    sys.exit(0)
