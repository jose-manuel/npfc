#!/usr/bin/env python

"""
Script fct_molecule_molecule
=============================
This script generates the molecule_molecule relationships file for a given input chunk.
"""
import argparse
from datetime import datetime
import pkg_resources
import sys
# data
import pandas as pd
# chemoinformatics
import rdkit
from rdkit import Chem
# dev
import npfc
from npfc.contrib.np_score import NPScorer
from npfc.contrib.sa_score import SAScorer
from npfc import filter
from npfc import load
from npfc import save
from npfc import utils


# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ FUNCTIONS ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ #


def main():

    # init
    d0 = datetime.now()
    description = """Script for generating the molecule - molecule relationships.
    Currently only one type of relationship is supported among molecules:
        - mol1 -[MAIN_SYNONYM_IS]-> mol2

    With that implementation, it is really easy to tace back to the kept molecule.

    Example:

        >>> fct_molecule_molecule fct/data/03_synthetic/data/file.csv.gz dataset/04_dedupl/data/file.csv.gz fct/molecule_molecule.csv.gz

    """

    # parameters CLI
    parser = argparse.ArgumentParser(description=description, formatter_class=argparse.ArgumentDefaultsHelpFormatter)
    parser.add_argument('input_synonyms', type=str, default=None, help="Input synonyms file.")
    parser.add_argument('input_molecule_table', type=str, default=None, help="Corresponding molecule table")
    parser.add_argument('output_table', type=str, default=None, help="Output file with the molecule - molecule relationships.")
    parser.add_argument('--model-file-np', type=str, default=None, help="Model to use for computing the Natural-Product-Likeness score.")
    parser.add_argument('--model-file-sa', type=str, default=None, help="Model to use for computing the Synthetic-Likeness score.")
    parser.add_argument('--log', type=str, default='INFO', help="Specify level of logging. Possible values are: CRITICAL, ERROR, WARNING, INFO, DEBUG.")
    args = parser.parse_args()

    # logging
    logger = utils._configure_logger(args.log)
    logger.info("RUNNING FCT_MOLECULE_MOLECULE")
    pad = 40

    # parse arguments
    utils.check_arg_input_file(args.input_molecule_table)
    utils.check_arg_input_file(args.input_synonyms)
    utils.check_arg_output_file(args.output_table)

    # display infos

    # versions
    logger.info("LIBRARY VERSIONS:")
    logger.info("rdkit".ljust(pad) + f"{rdkit.__version__}")
    logger.info("pandas".ljust(pad) + f"{pd.__version__}")
    logger.info("npfc".ljust(pad) + f"{npfc.__version__}")
    # arguments
    logger.info("ARGUMENTS:")
    logger.info("INPUT_SYNONYMS".ljust(pad) + f"{args.input_synonyms}")
    logger.info("INPUT_MOLECULE_TABLE".ljust(pad) + f"{args.input_molecule_table}")
    logger.info("OUTPUT_MOLECULE_MOLECULE_TABLE".ljust(pad) + f"{args.output_table}")
    # log
    logger.info("LOG".ljust(pad) + f"{args.log}")

    # begin

    logger.info("BEGIN")
    d1 = datetime.now()

    # load inputs
    logger.info("LOADING INPUT FILES")
    df_molecule = load.file(args.input_molecule_table)[['molecule_id']]
    df_synonyms = load.file(args.input_synonyms)[['idm_kept', 'idm_filtered']].rename({'idm_filtered': 'molecule_id_source', 'idm_kept': 'molecule_id_target'}, axis=1)
    d2 = datetime.now()

    # processing data
    logger.info("PROCESSING DATA")
    # consider relationships only for remaining nodes
    df = df_synonyms[df_synonyms['molecule_id_target'].isin(df_molecule['molecule_id'])]
    df['relationship'] = 'MAIN_SYNONYM_IS'
    df = df[['molecule_id_target', 'relationship', 'molecule_id_source']]
    d3 = datetime.now()

    # save file
    logger.info("SAVING OUTPUT")
    save.file(df, args.output_table)
    d4 = datetime.now()

    # end

    logger.info("SUMMARY")
    logger.info("COMPUTATIONAL TIME: CONFIGURING JOB".ljust(pad * 2) + f"{d1-d0}")
    logger.info("COMPUTATIONAL TIME: LOADING INPUTS".ljust(pad * 2) + f"{d2-d1}")
    logger.info("COMPUTATIONAL TIME: PROCESSING DATA".ljust(pad * 2) + f"{d3-d2}")
    logger.info("COMPUTATIONAL TIME: SAVING OUTPUT".ljust(pad * 2) + f"{d4-d3}")
    logger.info("COMPUTATIONAL TIME: TOTAL".ljust(pad * 2) + f"{d4-d0}")
    logger.info("END")
    sys.exit(0)

# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ MAIN ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ #


if __name__ == '__main__':
    main()
    sys.exit(0)
