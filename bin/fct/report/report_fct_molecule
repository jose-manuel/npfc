#!/usr/bin/env python

"""
Script report_molecule
==========================
This script generates csv and svg files based on molecular descriptor values.
"""
import argparse
import sys
from datetime import datetime
from pathlib import Path
from pkg_resources import resource_filename
# data handling
import pandas as pd
from pandas import DataFrame
# data visualization
import matplotlib
from matplotlib import pyplot as plt
import seaborn as sns
# custom libraries
import npfc
from npfc import utils
from npfc import load
from npfc import save
from npfc.draw import DEFAULT_PALETTE


# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ FUNCTIONS ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ #


def plot_molecular_features(df: DataFrame, features: list, dataset_name: str, output_plot: str = None, color: str = 'gray', draw_mean_line: bool = True, file_mplstyle: str = None):
    """Generate a multi-histogram plot describing the distribution of molecular features.

    :param df: a DataFrame with features
    :param features: a list of features to plot.
    :dataset_name: a name to describe the dataset to plot (appears in the main title)
    :output_plot: a SVG or PNG file where to store the plot
    :color: the color to use for bars
    :draw_mean_line: draw vertical dotted lines to indicate mean values of each feature
    :return: a multi-histogram plot
    """
    # initialization
    if file_mplstyle is None:
        file_mplstyle = resource_filename('npfc', 'data/report.mplstyle')
    plt.style.use(file_mplstyle)
    num_features = len(features)

    # determine how many rows the plot needs based on the number of features to plot:
    # TODO

    num_cols = 4
    fig, axes = plt.subplots(nrows=2, ncols=num_cols, figsize=(24, 12))
    axes = axes.ravel()

    # add main title for figure
    fig.suptitle(f"Molecular Feature Distribution in {dataset_name}")

    # subplots
    for i, ax in enumerate(axes):

        if i < num_features:
            sns.histplot(df[features[i]], kde=False, label='', color=color, ax=ax)
            if draw_mean_line:
                feature_mean = df[features[i]].mean()
                ax.axvline(feature_mean, color='black', ls='--', zorder=2)  # dotted line for median

            if not i % num_cols:
                ax.set_ylabel('Count')
            else:
                ax.set_ylabel('')
        else:
            fig.delaxes(ax)  # remove empty plots from grid

    # clean-up
    fig.tight_layout(pad=4)

    # export plot
    fig.savefig(output_plot)

    return fig


def main():

    # init
    d0 = datetime.now()
    description = """Script for generating the molecular descriptors plots.
    It uses the installed npfc libary in your favorite env manager.

    Example:
        >>> # with a single input file
        >>> fct_report_molecule fct/molecule/molecule.csv.gz molecule_descr.svg green dnp
        >>> # with a folder containing multiple files
        >>> fct_report_molecule fct/molecule molecule_descr.svg green dnp

    """

    # parameters CLI
    parser = argparse.ArgumentParser(description=description, formatter_class=argparse.ArgumentDefaultsHelpFormatter)
    parser.add_argument('input_molecule_dir', type=str, default=None, help="Input molecule table directory.")
    parser.add_argument('output_plot', type=str, default=None, help="Output file (svg). A csv.gz file with the same basename is generated as well")
    parser.add_argument('color', type=str, default=None, help="Color of the bars. Predefined shades are available for gray, green, blue, red and orange.")
    parser.add_argument('dataset', type=str, default=None, help="Name of the dataset to write on the output plot.")
    parser.add_argument('--mplstyle', type=str, default=None, help="Specify a matplotlib style file. By default the 'report' style from the npc/data subfolder is used.")
    parser.add_argument('--log', type=str, default='INFO', help="Specify level of logging. Possible values are: CRITICAL, ERROR, WARNING, INFO, DEBUG.")
    args = parser.parse_args()

    # logging
    logger = utils._configure_logger(args.log)
    logger.info("RUNNING FCT_REPORT_MOLECULE")
    pad = 40

    # parse arguments

    # input_files
    path_input = Path(args.input_molecule_dir)
    if path_input.is_dir():
        input_files = sorted([str(x) for x in path_input.glob('molecule*.csv.gz')])
    else:  # it is a single file
        input_files = [args.input_molecule_dir]
    for f in input_files:
        utils.check_arg_input_file(f)
    # output_plot
    utils.check_arg_output_plot(args.output_plot)
    output_csv = args.output_plot.replace('.svg', '.csv.gz')
    # matplotlib style
    if args.mplstyle is None:
        file_mplstyle = resource_filename('npfc', 'data/report.mplstyle')
    else:
        file_mplstyle = args.mplstyle
    utils.check_arg_config_file(file_mplstyle)

    # determine color
    color_identified = False
    try:
        color = matplotlib.colors.to_hex(DEFAULT_PALETTE[args.color])
        color_identified = True
    except KeyError:
        color = args.color

    # display infos

    # versions
    logger.info("LIBRARY VERSIONS:")
    logger.info("pandas".ljust(pad) + f"{pd.__version__}")
    logger.info("npfc".ljust(pad) + f"{npfc.__version__}")
    # arguments
    logger.info("ARGUMENTS:")
    logger.info("INPUT_MOLECULE_DIR".ljust(pad) + f"{args.input_molecule_dir}")
    logger.info("NUMBER OF INPUT FILES".ljust(pad) + f"{len(input_files)}")
    logger.info("OUTPUT_PLOT".ljust(pad) + f"{args.output_plot}")
    logger.info("DATASET".ljust(pad) + f"{args.dataset}")
    logger.info("OUTPUT_CSV".ljust(pad) + f"{output_csv}")
    if color_identified:
        logger.info("COLOR".ljust(pad) + f"{args.color} ({color})")
    else:
        logger.info("COLOR".ljust(pad) + f"{color}")
    if args.mplstyle is None:
        logger.info("MPLSTYLE".ljust(pad) + 'REPORT (DEFAULT)')
    else:
        logger.info("MPLSTYLE".ljust(pad) + f"{args.mplstyle}")
    # log
    logger.info("LOG".ljust(pad) + f"{args.log}")

    # begin

    logger.info("BEGIN")
    d1 = datetime.now()

    # load inputs
    logger.info(f"LOADING {len(input_files):,} INPUT MOLECULE TABLES")
    d = {'molecular_weight': 'Molecular Weight',
         'num_atoms_oxygen': 'Number of Oxygen Atoms',
         'num_atoms_nitrogen': 'Number of Nitrogen Atoms',
         'num_rings': 'Number of Rings',
         'num_violations_lipinski': "Number of Violations of Lipinski's rule",
         'np_score': 'NP-Likeness Score',
         'sa_score': 'Synthetical Accessibility Score',
         'commercial_num_refs': 'Number of Commercial Ref.',
         }
    columns = list(d.keys())

    df = pd.concat([load.file(x, decode=False) for x in input_files])[columns].rename(d, axis=1)
    d2 = datetime.now()

    # run plotting
    logger.info("PLOTTING DATA")
    # If the input df is empty, then the apply command below fails dramatically
    features = list(d.values())
    plot_molecular_features(df, features, args.dataset, args.output_plot, color, file_mplstyle)
    d3 = datetime.now()

    # save file
    logger.info("SAVING OUTPUT")
    save.file(df, output_csv)
    d4 = datetime.now()

    # end

    logger.info("SUMMARY")
    logger.info("COMPUTATIONAL TIME: CONFIGURING JOB".ljust(pad * 2) + f"{d1-d0}")
    logger.info("COMPUTATIONAL TIME: LOADING INPUTS".ljust(pad * 2) + f"{d2-d1}")
    logger.info("COMPUTATIONAL TIME: COMPUTING PLOTS".ljust(pad * 2) + f"{d3-d2}")
    logger.info("COMPUTATIONAL TIME: SAVING OUTPUT".ljust(pad * 2) + f"{d4-d3}")
    logger.info("COMPUTATIONAL TIME: TOTAL".ljust(pad * 2) + f"{d4-d0}")
    logger.info("END")
    sys.exit(0)

# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ MAIN ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ #


if __name__ == '__main__':
    main()
    sys.exit(0)
