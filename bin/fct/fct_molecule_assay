#!/usr/bin/env python

"""
Script fct_molecule_assay
=============================
This script generates the molecule - assay relationships file for a given input chunk.

It is actually the activity data of a given molecule.
"""
import argparse
from datetime import datetime
import sys
import json
# data
import pandas as pd
# chemoinformatics
import rdkit
# dev
import npfc
from npfc import load
from npfc import save
from npfc import utils


# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ FUNCTIONS ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ #


def main():

    # init
    d0 = datetime.now()
    description = """Script for generating the molecule - assay relationships (fragment hits).
    Three relationship types are supported:
        - mol -[TESTED_ACTIVE]-> assay
        - mol -[TESTED_INACTIVE]-> assay
        - mol -[TESTED_UNKNOWN]-> assay

    TESTED-UNKNOWN is for relationships where the activity data was unknown or filtered out
    during data curation.

    Properties are included within the relationship:
        - pchembl_value
        - value
        - activity_type
        - standard_units

    Example:

        >>> fct_fragment_molecule dataset/12_pnp/data/file.csv.gz fct/fragment_molecule.csv.gz

    """

    # parameters CLI
    parser = argparse.ArgumentParser(description=description, formatter_class=argparse.ArgumentDefaultsHelpFormatter)
    parser.add_argument('input_molecule_assay_table', type=str, default=None, help="The raw input molecule_assay table for the corresponding dataset.")
    parser.add_argument('input_molecule_table', type=str, default=None, help="The input molecule table.")
    parser.add_argument('output_table', type=str, default=None, help="Output file with the fragment - molecule relationships.")
    parser.add_argument('--log', type=str, default='INFO', help="Specify level of logging. Possible values are: CRITICAL, ERROR, WARNING, INFO, DEBUG.")
    args = parser.parse_args()

    # logging
    logger = utils._configure_logger(args.log)
    logger.info("RUNNING FCT_FRAGMENT_MOLECULE")
    pad = 40

    # parse arguments
    utils.check_arg_input_file(args.input_molecule_assay_table)
    utils.check_arg_input_file(args.input_molecule_table)
    utils.check_arg_output_file(args.output_table)

    # display infos

    # versions
    logger.info("LIBRARY VERSIONS:")
    logger.info("rdkit".ljust(pad) + f"{rdkit.__version__}")
    logger.info("pandas".ljust(pad) + f"{pd.__version__}")
    logger.info("npfc".ljust(pad) + f"{npfc.__version__}")
    # arguments
    logger.info("ARGUMENTS:")
    logger.info("INPUT_MOLECULE_ASSAY_TABLE".ljust(pad) + f"{args.input_molecule_assay_table}")
    logger.info("INPUT_MOLECULE_TABLE".ljust(pad) + f"{args.input_molecule_table}")
    logger.info("OUTPUT_MOLECULE_ASSAY_TABLE".ljust(pad) + f"{args.output_table}")
    # log
    logger.info("LOG".ljust(pad) + f"{args.log}")

    # begin

    logger.info("BEGIN")
    d1 = datetime.now()

    # load inputs
    logger.info("LOADING INPUT FILES")
    df_molecule_assay_raw = load.file(args.input_molecule_assay_table)
    logger.info(f"LOADED {len(df_molecule_assay_raw):,} MOLECULE-ASSAY RELATIONSHIPS")
    df_molecule = load.file(args.input_molecule_table, decode=False)[['molecule_id']].groupby('molecule_id', as_index=False).first()
    logger.info(f"LOADED {len(df_molecule)} MOLECULE ENTRIES")
    d2 = datetime.now()

    # process data

    d3 = datetime.now()
    df_molecule_assay = df_molecule_assay_raw[df_molecule_assay_raw['molecule_id'].isin(df_molecule['molecule_id'])]
    logger.info(f"REMAINING NUMBER OF MOLECULE-ASSAY RELATIONSHIPS: {len(df_molecule_assay)}")
    logger.info(f"NUMBER OF MOLECULES WITH UNKNOWN ACTIVITY: {len(df_molecule[~df_molecule['molecule_id'].isin(df_molecule_assay_raw['molecule_id'])]):,}")
    logger.warning("MOLECULES WITH UNKOWN ACTIVITIES ARE NOT SAVED IN THIS TABLE!")
    # save file
    logger.info("SAVING OUTPUT")
    save.file(df_molecule_assay, args.output_table)
    d4 = datetime.now()

    # end

    logger.info("SUMMARY")
    logger.info("COMPUTATIONAL TIME: CONFIGURING JOB".ljust(pad * 2) + f"{d1-d0}")
    logger.info("COMPUTATIONAL TIME: LOADING INPUTS".ljust(pad * 2) + f"{d2-d1}")
    logger.info("COMPUTATIONAL TIME: PROCESSING DATA".ljust(pad * 2) + f"{d3-d2}")
    logger.info("COMPUTATIONAL TIME: SAVING OUTPUT".ljust(pad * 2) + f"{d4-d3}")
    logger.info("COMPUTATIONAL TIME: TOTAL".ljust(pad * 2) + f"{d4-d0}")
    logger.info("END")
    sys.exit(0)

# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ MAIN ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ #


if __name__ == '__main__':
    main()
    sys.exit(0)
