#!/usr/bin/env python

"""
Script fct_document
==========================
This script generates the document file for a given input chunk.
Required files are the load chunk and the latest step of the workflow.
"""
import argparse
from datetime import datetime
import pkg_resources
import sys
# data
import pandas as pd
# chemoinformatics
import rdkit
from rdkit import Chem
# dev
import npfc
from npfc.contrib.np_score import NPScorer
from npfc.contrib.sa_score import SAScorer
from npfc import filter
from npfc import load
from npfc import save
from npfc import utils


# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ FUNCTIONS ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ #


def main():

    # init
    d0 = datetime.now()
    description = """Script for generating the molecule node table for a given input file (or chunk).
    The output document table have properties:

        - document_id
        - doc_type
        - year
        - doc_name
        - doi
        - journal
        - authors
        - title

    It uses the installed npfc libary in your favorite env manager.

    Example:

        >>> fct_document raw/document.csv.gz fct/assay_document.csv.gz fct/molecule_document.csv.gz fct/document.csv.gz

    """

    # parameters CLI
    parser = argparse.ArgumentParser(description=description, formatter_class=argparse.ArgumentDefaultsHelpFormatter)
    parser.add_argument('input_document_table', type=str, default=None, help="Output file from the load step.")
    parser.add_argument('input_molecule_document_table', type=str, default=None, help="Output file from the latest step of the pipeline.")
    parser.add_argument('input_assay_document_table', type=str, default=None, help="Output file from the latest step of the pipeline.")
    parser.add_argument('output_table', type=str, default=None, help="Output file with annotated molecules.")
    parser.add_argument('--log', type=str, default='INFO', help="Specify level of logging. Possible values are: CRITICAL, ERROR, WARNING, INFO, DEBUG.")
    args = parser.parse_args()

    # logging
    logger = utils._configure_logger(args.log)
    logger.info("RUNNING FCT_DOCUMENT")
    pad = 40

    # parse arguments
    utils.check_arg_input_file(args.input_document_table)
    utils.check_arg_input_file(args.input_molecule_document_table)
    utils.check_arg_input_file(args.input_assay_document_table)
    utils.check_arg_output_file(args.output_table)

    # display infos

    # versions
    logger.info("LIBRARY VERSIONS:")
    logger.info("rdkit".ljust(pad) + f"{rdkit.__version__}")
    logger.info("pandas".ljust(pad) + f"{pd.__version__}")
    logger.info("npfc".ljust(pad) + f"{npfc.__version__}")
    # arguments
    logger.info("ARGUMENTS:")
    logger.info("INPUT_DOCUMENT_TABLE".ljust(pad) + f"{args.input_document_table}")
    logger.info("INPUT_MOLECULE_DOCUMENT_TABLE".ljust(pad) + f"{args.input_molecule_document_table}")
    logger.info("INPUT_ASSAY_DOCUMENT_TABLE".ljust(pad) + f"{args.input_assay_document_table}")
    logger.info("OUTPUT_MOLECULE_TABLE".ljust(pad) + f"{args.output_table}")
    # log
    logger.info("LOG".ljust(pad) + f"{args.log}")

    # begin

    logger.info("BEGIN")
    d1 = datetime.now()

    # load inputs
    logger.info("LOADING INPUT FILES")
    df_document_raw = load.file(args.input_document_table)
    logger.info(f"LOADED {len(df_document_raw):,} DOCUMENT NODES")
    df_molecule_document = load.file(args.input_molecule_document_table)
    logger.info(f"LOADED {len(df_molecule_document):,} MOLECULE-DOCUMENT RELATIONSHIPS")
    df_assay_document = load.file(args.input_assay_document_table)
    logger.info(f"LOADED {len(df_assay_document):,} ASSAY-DOCUMENT RELATIONSHIPS")
    d2 = datetime.now()

    # merge dataframes
    logger.info("PROCESSING DATA")
    df_document = df_document_raw[(df_document_raw['document_id'].isin(df_molecule_document['document_id']) | (df_document_raw['document_id'].isin(df_assay_document['document_id'])))]
    logger.info(f"REMAINING NUMBER OF DOCUMENT NODES: {len(df_document)}")
    d3 = datetime.now()

    # save file
    logger.info("SAVING OUTPUT")
    save.file(df_document, args.output_table)
    d4 = datetime.now()

    # end

    logger.info("SUMMARY")
    logger.info("COMPUTATIONAL TIME: CONFIGURING JOB".ljust(pad * 2) + f"{d1-d0}")
    logger.info("COMPUTATIONAL TIME: LOADING INPUTS".ljust(pad * 2) + f"{d2-d1}")
    logger.info("COMPUTATIONAL TIME: COMPUTING ANNOTATIONS".ljust(pad * 2) + f"{d3-d2}")
    logger.info("COMPUTATIONAL TIME: SAVING OUTPUT".ljust(pad * 2) + f"{d4-d3}")
    logger.info("COMPUTATIONAL TIME: TOTAL".ljust(pad * 2) + f"{d4-d0}")
    logger.info("END")
    sys.exit(0)

# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ MAIN ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ #


if __name__ == '__main__':
    main()
    sys.exit(0)
