#!/usr/bin/env python

"""
Script fct_dataset
=============================
This script generates the dataset nodes file.
"""
import argparse
from datetime import datetime
import os
from pathlib import Path
import time
import sys
# data
import json
import pandas as pd
# dev
import npfc
from npfc import load
from npfc import save
from npfc import utils


# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ FUNCTIONS ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ #


def main():

    # init
    d0 = datetime.now()
    description = """Script for generating the dataset nodes table.

    A dataset node consists in:
        - name (chembl)
        - type (synthetic)
        - version (ChEMBL27)
        - date_raw_file (2020.06.02)
        - latest_update (2020.11.08)
        - configuration (content of 'synthetic/chembl/chembl_natrefdnp_fragcrms.json' as multiline string)

    All theses informations are extracted from the json configuration file.

    Example:

        >>> fct_dataset synthetic/chembl/chembl_natrefdnp_fragcrms.json fct/data/dataset.csv.gz
    """

    # parameters CLI
    parser = argparse.ArgumentParser(description=description, formatter_class=argparse.ArgumentDefaultsHelpFormatter)
    parser.add_argument('type', type=str, default=None, help="Type of the dataset. Possible values: 'fragments', 'natural', 'synthetic'.")
    parser.add_argument('input_conf_file', type=str, default=None, help="Location of the initial raw file of the dataset.")
    parser.add_argument('output_table', type=str, default=None, help="Output file with the fragment - fragment relationships.")
    parser.add_argument('--log', type=str, default='INFO', help="Specify level of logging. Possible values are: CRITICAL, ERROR, WARNING, INFO, DEBUG.")
    args = parser.parse_args()

    # logging
    logger = utils._configure_logger(args.log)
    logger.info("RUNNING FCT_DATASET")
    pad = 40

    # parse arguments
    utils.check_arg_config_file(args.input_conf_file)
    utils.check_arg_output_file(args.output_table)
    authorized_types = ['fragments', 'natural', 'synthetic']
    if args.type not in authorized_types:
        raise ValueError(f"ERROR! Argument type is not within authorized types ({args.type})!\n Authorized types are:" + ','.join(authorized_types))

    # display infos

    # versions
    logger.info("LIBRARY VERSIONS:")
    logger.info("pandas".ljust(pad) + f"{pd.__version__}")
    logger.info("npfc".ljust(pad) + f"{npfc.__version__}")
    # arguments
    logger.info("ARGUMENTS:")
    logger.info("INPUT_CONF_FILE".ljust(pad) + f"{args.input_conf_file}")
    logger.info("OUTPUT_ASSSAY_TABLE".ljust(pad) + f"{args.output_table}")
    # log
    logger.info("LOG".ljust(pad) + f"{args.log}")

    # begin

    logger.info("BEGIN")
    d1 = datetime.now()

    # load inputs
    logger.info("LOADING INPUT FILES")
    with open(args.input_conf_file) as json_file:
        c = json.load(json_file)
    d2 = datetime.now()

    # date_raw_file
    # https://thispointer.com/python-get-last-modification-date-time-of-a-file-os-stat-os-path-getmtime/
    modTimesinceEpoc = os.path.getmtime(c['input_file'])
    date_raw_file = time.strftime('%Y-%m-%d %H:%M:%S', time.localtime(modTimesinceEpoc))

    df = pd.DataFrame([[c['prefix'],
                        args.type,
                        Path(Path(c['input_file']).stem).stem,
                        datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
                        date_raw_file,
                        c['protocol_std'],
                        args.input_conf_file,
                        json.dumps(c),
                        ]], columns=['dataset_id', 'type', 'version', 'date_latest_update', 'date_raw_file', 'protocol_std', 'config_file', 'config'])
    d3 = datetime.now()

    # save file
    logger.info("SAVING OUTPUT")
    save.file(df, args.output_table)
    d4 = datetime.now()

    # end

    logger.info("SUMMARY")
    logger.info("COMPUTATIONAL TIME: CONFIGURING JOB".ljust(pad * 2) + f"{d1-d0}")
    logger.info("COMPUTATIONAL TIME: LOADING INPUTS".ljust(pad * 2) + f"{d2-d1}")
    logger.info("COMPUTATIONAL TIME: PROCESSING DATA".ljust(pad * 2) + f"{d3-d2}")
    logger.info("COMPUTATIONAL TIME: SAVING OUTPUT".ljust(pad * 2) + f"{d4-d3}")
    logger.info("COMPUTATIONAL TIME: TOTAL".ljust(pad * 2) + f"{d4-d0}")
    logger.info("END")
    sys.exit(0)


# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ MAIN ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ #


if __name__ == '__main__':
    main()
    sys.exit(0)
