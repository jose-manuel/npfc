#!/usr/bin/env python

"""
Script fct_dataset
=============================
This script generates the dataset nodes file.
"""
import argparse
from datetime import datetime
import os
from pathlib import Path
import time
import sys
# data
import json
import pandas as pd
# dev
import npfc
from npfc import load
from npfc import save
from npfc import utils


# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ FUNCTIONS ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ #


def main():

    # init
    d0 = datetime.now()
    description = """Script for generating the molecule_dataset relationship table.

    There is no attribute to the relationship, but there are 3 different types of relationships:
        - FOUND_IN_FRAGMENTS
        - FOUND_IN_NATURAL
        - FOUND_IN_SYNTHETIC

    This should allow for faster molecule selection based on their dataset type (all natural molecules, etc.).
    It is expected that only one row is in the dataset table.

    Example:

        >>> fct_molecule_dataset fct/data/molecule.csv.gz fct/data/dataset.csv.gz
    """

    # parameters CLI
    parser = argparse.ArgumentParser(description=description, formatter_class=argparse.ArgumentDefaultsHelpFormatter)
    parser.add_argument('type', type=str, default=None, help="Type of the dataset. Possible values: 'fragments', 'natural', 'synthetic'.")
    parser.add_argument('input_molecule_table', type=str, default=None, help="Location of the initial raw file of the dataset.")
    parser.add_argument('input_dataset_table', type=str, default=None, help="Location of the initial raw file of the dataset.")
    parser.add_argument('output_table', type=str, default=None, help="Output file with the fragment - fragment relationships.")
    parser.add_argument('--log', type=str, default='INFO', help="Specify level of logging. Possible values are: CRITICAL, ERROR, WARNING, INFO, DEBUG.")
    args = parser.parse_args()

    # logging
    logger = utils._configure_logger(args.log)
    logger.info("RUNNING FCT_MOLECULE_DATASET")
    pad = 40

    # parse arguments
    utils.check_arg_input_file(args.input_molecule_table)
    utils.check_arg_input_file(args.input_dataset_table)
    utils.check_arg_output_file(args.output_table)
    authorized_types = ['fragments', 'natural', 'synthetic']
    if args.type not in authorized_types:
        raise ValueError(f"ERROR! Argument type is not within authorized types ({args.type})!\n Authorized types are:" + ','.join(authorized_types))

    # display infos

    # versions
    logger.info("LIBRARY VERSIONS:")
    logger.info("pandas".ljust(pad) + f"{pd.__version__}")
    logger.info("npfc".ljust(pad) + f"{npfc.__version__}")
    # arguments
    logger.info("ARGUMENTS:")
    logger.info("INPUT_MOLECULE_TABLE".ljust(pad) + f"{args.input_molecule_table}")
    logger.info("INPUT_DATASET_TABLE".ljust(pad) + f"{args.input_dataset_table}")
    logger.info("OUTPUT_MOLECULE_DATASET_TABLE".ljust(pad) + f"{args.output_table}")
    # log
    logger.info("LOG".ljust(pad) + f"{args.log}")

    # begin

    logger.info("BEGIN")
    d1 = datetime.now()

    # load inputs
    logger.info("LOADING INPUT FILES")
    df_molecule = load.file(args.input_molecule_table)
    df_dataset = load.file(args.input_dataset_table)
    if len(df_dataset) != 1:
        raise ValueError(f"ERROR! THERE SHOULD BE EXACTLY 1 ENTRY IN THE DATASET TABLE ({len(df_dataset)} FOUND)")
    d2 = datetime.now()

    # process data
    df = df_molecule[['molecule_id']].copy()
    df['dataset_id'] = df_dataset.iloc[0]['dataset_id']
    d = {'fragments': 'FRAGMENT_FROM',
         'natural': 'NATURAL_PRODUCT_FROM',
         'synthetic': 'SYNTHETIC_COMPOUND_FROM',
         }
    df['relationship'] = d[args.type]
    df = df[['molecule_id', 'relationship', 'dataset_id']]
    d3 = datetime.now()

    # save file
    logger.info("SAVING OUTPUT")
    save.file(df, args.output_table)
    d4 = datetime.now()

    # end

    logger.info("SUMMARY")
    logger.info("COMPUTATIONAL TIME: CONFIGURING JOB".ljust(pad * 2) + f"{d1-d0}")
    logger.info("COMPUTATIONAL TIME: LOADING INPUTS".ljust(pad * 2) + f"{d2-d1}")
    logger.info("COMPUTATIONAL TIME: PROCESSING DATA".ljust(pad * 2) + f"{d3-d2}")
    logger.info("COMPUTATIONAL TIME: SAVING OUTPUT".ljust(pad * 2) + f"{d4-d3}")
    logger.info("COMPUTATIONAL TIME: TOTAL".ljust(pad * 2) + f"{d4-d0}")
    logger.info("END")
    sys.exit(0)


# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ MAIN ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ #


if __name__ == '__main__':
    main()
    sys.exit(0)
