#!/usr/bin/env python

"""
Script fct_assay_document
=============================
This script generates the assay - document relationships file for a given input chunk.
"""
import argparse
from datetime import datetime
import sys
# data
import pandas as pd
# chemoinformatics
import rdkit
# dev
import npfc
from npfc import load
from npfc import save
from npfc import utils


# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ FUNCTIONS ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ #


def main():

    # init
    d0 = datetime.now()
    description = """Script for generating the assay - documents relationships (fragment hits).
    One relationship type is supported:
        - assay -[DOCUMENTED_IN]-> document

    Example:

        >>> fct_assay_document fct/assay/assay.csv.gz fct/raw/document.csv.gz fct/assay_document/data/assay_document.csv.gz

    """

    # parameters CLI
    parser = argparse.ArgumentParser(description=description, formatter_class=argparse.ArgumentDefaultsHelpFormatter)
    parser.add_argument('input_assay_document_table', type=str, default=None, help="The raw input assay_document table for the corresponding dataset.")
    parser.add_argument('input_assay_table', type=str, default=None, help="The input assay table.")
    parser.add_argument('output_table', type=str, default=None, help="Output file with the fragment - assay relationships.")
    parser.add_argument('--log', type=str, default='INFO', help="Specify level of logging. Possible values are: CRITICAL, ERROR, WARNING, INFO, DEBUG.")
    args = parser.parse_args()

    # logging
    logger = utils._configure_logger(args.log)
    logger.info("RUNNING FCT_ASSAY_DOCUMENT")
    pad = 40

    # parse arguments
    utils.check_arg_input_file(args.input_assay_document_table)
    utils.check_arg_input_file(args.input_assay_table)
    utils.check_arg_output_file(args.output_table)

    # display infos

    # versions
    logger.info("LIBRARY VERSIONS:")
    logger.info("rdkit".ljust(pad) + f"{rdkit.__version__}")
    logger.info("pandas".ljust(pad) + f"{pd.__version__}")
    logger.info("npfc".ljust(pad) + f"{npfc.__version__}")
    # arguments
    logger.info("ARGUMENTS:")
    logger.info("INPUT_ASSAY_DOCUMENT_TABLE".ljust(pad) + f"{args.input_assay_document_table}")
    logger.info("INPUT_ASSAY_TABLE".ljust(pad) + f"{args.input_assay_table}")
    logger.info("OUTPUT_ASSAY_DOCUMENT_TABLE".ljust(pad) + f"{args.output_table}")
    # log
    logger.info("LOG".ljust(pad) + f"{args.log}")

    # begin

    logger.info("BEGIN")
    d1 = datetime.now()

    # load inputs
    logger.info("LOADING INPUT FILES")
    df_assay_document_raw = load.file(args.input_assay_document_table)
    logger.info(f"LOADED {len(df_assay_document_raw):,} ASSAY-DOCUMENT RELATIONSHIPS")
    df_assay = load.file(args.input_assay_table, decode=False)[['assay_id']].groupby('assay_id', as_index=False).first()
    logger.info(f"LOADED {len(df_assay)} ASSAY ENTRIES")
    d2 = datetime.now()

    # process data

    d3 = datetime.now()
    df_assay_document = df_assay_document_raw[df_assay_document_raw['assay_id'].isin(df_assay['assay_id'])]
    logger.info(f"REMAINING NUMBER OF ASSAY-DOCUMENT RELATIONSHIPS: {len(df_assay_document)}")
    logger.info(f"NUMBER OF ASSAYS WITH UNKNOWN DOCUMENTS: {len(df_assay[~df_assay['assay_id'].isin(df_assay_document_raw['assay_id'])]):,}")
    logger.warning("ASSAYS WITH UNKOWN DOCUMENTS ARE NOT SAVED IN THIS TABLE!")
    # save file
    logger.info("SAVING OUTPUT")
    save.file(df_assay_document, args.output_table)
    d4 = datetime.now()

    # end

    logger.info("SUMMARY")
    logger.info("COMPUTATIONAL TIME: CONFIGURING JOB".ljust(pad * 2) + f"{d1-d0}")
    logger.info("COMPUTATIONAL TIME: LOADING INPUTS".ljust(pad * 2) + f"{d2-d1}")
    logger.info("COMPUTATIONAL TIME: PROCESSING DATA".ljust(pad * 2) + f"{d3-d2}")
    logger.info("COMPUTATIONAL TIME: SAVING OUTPUT".ljust(pad * 2) + f"{d4-d3}")
    logger.info("COMPUTATIONAL TIME: TOTAL".ljust(pad * 2) + f"{d4-d0}")
    logger.info("END")
    sys.exit(0)

# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ MAIN ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ #


if __name__ == '__main__':
    main()
    sys.exit(0)
